{"version":3,"sources":["styles/Theme.js","App.js","serviceWorker.js","index.js","components/common/Loading.js"],"names":["APP_THEME","global","font","family","size","height","focus","border","color","accordian","hover","heading","dark","light","level","icons","panel","anchor","fontWeight","button","default","Main","lazy","Admin","Login","Logout","Pushie","App","_props","Grommet","theme","fallback","Loading","path","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","width","justify","align","background"],"mappings":"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","file":"static/js/main.d3c5a4fe.chunk.js","sourcesContent":["export const APP_THEME = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n    focus: {\n      border: {\n        color: 'transparent',\n      },\n    },\n  },\n  accordian: {\n    hover: {\n      heading: {\n        color: { dark: 'white', light: 'dark-3' },\n        level: 2,\n      },\n    },\n    icons: {\n      color: 'white',\n    },\n    border: {\n      color: 'transparent',\n    },\n    panel: {\n      hover: {\n        heading: {\n          color: { dark: 'white', light: 'dark-3' },\n          level: 2,\n        },\n      },\n      border: {\n        color: 'transparent',\n      },\n    },\n  },\n  anchor: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n  button: {\n    default: {\n      border: {\n        color: 'white',\n      },\n      color: 'white',\n    },\n  },\n};\n","import React, { lazy, Suspense } from 'react';\nimport { Grommet } from 'grommet';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './styles/App.module.css';\nimport { APP_THEME } from './styles/Theme';\nimport Loading from './components/common/Loading';\n\nconst Main = lazy(() => import('./routes/Main'));\nconst Admin = lazy(() => import('./routes/Admin'));\nconst Login = lazy(() => import('./routes/Login'));\nconst Logout = lazy(() => import('./routes/Logout'));\nconst Pushie = lazy(() => import('./routes/Pushie'));\n\nconst App = _props => {\n  return (\n    <Grommet theme={APP_THEME}>\n      <Router>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path={'/admin'}>\n              <Admin />\n            </Route>\n            <Route path={'/login'}>\n              <Login />\n            </Route>\n            <Route path={'/logout'}>\n              <Logout />\n            </Route>\n            <Route path={'/pushie'}>\n              <Pushie />\n            </Route>\n            <Route exact path={'/'}>\n              <Main />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Grommet>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n","import React from 'react';\nimport { Box } from 'grommet';\nimport { PropagateLoader } from 'react-spinners';\n\nconst Loading = _props => {\n  return (\n    <Box\n      width={'100vw'}\n      height={'100vh'}\n      justify={'center'}\n      align={'center'}\n      background={'white'}>\n      <PropagateLoader size={25} color={'black'} />\n    </Box>\n  );\n};\n\nexport default Loading;\n"],"sourceRoot":""}