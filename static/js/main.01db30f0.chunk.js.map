{"version":3,"sources":["styles/Title.module.css","styles/App.module.css","constants.js","components/ModalContent.js","components/Modal.js","components/Title.js","App.js","serviceWorker.js","index.js","styles/Modal.module.css","styles/ModalContent.module.css"],"names":["module","exports","socialMap","Map","set","ModalContent","props","className","styles","ModalContentWrapper","ModalHeader","content","Modal","modalVisible","ModalShown","ModalHidden","ModalClose","style","color","fontSize","onClick","handleModal","Title","useState","setModalVisible","modalContent","setModalContent","handleClick","e","type","preventDefault","window","open","get","App","TitleText","SocialIcons","ModalLinksWrapper","ModalLinks","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,IAAM,mBAAmB,UAAY,yBAAyB,YAAc,2BAA2B,kBAAoB,iCAAiC,WAAa,4B,wCCA3LD,EAAOC,QAAU,CAAC,MAAQ,mBAAmB,OAAS,sB,8JCDlDC,EAAY,IAAIC,IACpBD,EAAUE,IAAI,SAAU,mCACxBF,EAAUE,IAAI,WAAY,wCAC1BF,EAAUE,IAAI,QAAS,kC,qDCQRC,MARf,SAAsBC,GAClB,OACE,yBAAKC,UAAWC,IAAOC,qBACrB,wBAAIF,UAAWC,IAAOE,aAAcJ,EAAMK,WCiBnCC,MAlBf,SAAeN,GACb,OACE,yBACEC,UAAS,UAAKC,IAAOI,MAAZ,YACPN,EAAMO,aAAeL,IAAOM,WAAaN,IAAOO,cAGlD,yBAAKR,UAAWC,IAAOQ,YACrB,kBAAC,IAAD,CACEC,MAAO,CAAEC,MAAO,QAASC,SAAU,IACnCC,QAAS,kBAAMd,EAAMe,YAAY,QAGrC,kBAAC,EAAD,CAAcV,QAASL,EAAMK,YCyCpBW,MAnDf,WAAkB,IAAD,EACyBC,oBAAS,GADlC,mBACRV,EADQ,KACMW,EADN,OAEyBD,mBAAS,IAFlC,mBAERE,EAFQ,KAEMC,EAFN,KAITC,EAAc,SAACC,EAAGC,GACtBD,EAAEE,iBACFC,OAAOC,KAAK9B,EAAU+B,IAAIJ,GAAO,UAG7BR,EAAc,SAACV,GACnBe,EAAgBf,GAChBa,GAAiBX,IAGnB,OACE,oCACE,yBAAKN,UAAWC,IAAO0B,KACrB,kBAAC,EAAD,CACErB,aAAcA,EACdQ,YAAaA,EACbV,QAASc,IAEX,6BACE,wBAAIlB,UAAWC,IAAO2B,WAAtB,gBACA,6BACE,kBAAC,IAAD,CACE5B,UAAWC,IAAO4B,YAClBnB,MAAO,CAAEC,MAAO,QAASC,SAAU,OACnCC,QAAS,SAACQ,GAAD,OAAOD,EAAYC,EAAG,aAEjC,kBAAC,IAAD,CACErB,UAAWC,IAAO4B,YAClBnB,MAAO,CAAEC,MAAO,QAASC,SAAU,OACnCC,QAAS,SAACQ,GAAD,OAAOD,EAAYC,EAAG,eAEjC,kBAAC,IAAD,CACErB,UAAWC,IAAO4B,YAClBnB,MAAO,CAAEC,MAAO,QAASC,SAAU,OACnCC,QAAS,SAACQ,GAAD,OAAOD,EAAYC,EAAG,cAIrC,yBAAKrB,UAAWC,IAAO6B,mBACrB,uBAAG9B,UAAWC,IAAO8B,WAAYlB,QAAS,kBAAMC,EAAY,aAA5D,WACA,uBAAGd,UAAWC,IAAO8B,WAAYlB,QAAS,kBAAMC,EAAY,cAA5D,gB,MCvCKa,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCIcK,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BzD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,0BAA0B,WAAa,2CAA2C,YAAc,+C,kBCA5JD,EAAOC,QAAU,CAAC,oBAAsB,0CAA0C,YAAc,qC","file":"static/js/main.01db30f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Title_App__1bGmV\",\"TitleText\":\"Title_TitleText__2YgqQ\",\"SocialIcons\":\"Title_SocialIcons__Kk-mQ\",\"ModalLinksWrapper\":\"Title_ModalLinksWrapper__2rZXS\",\"ModalLinks\":\"Title_ModalLinks__56tUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Shown\":\"App_Shown__2YHaF\",\"Hidden\":\"App_Hidden__ZPxLl\"};","let socialMap = new Map();\nsocialMap.set('github', 'https://github.com/adriancleung');\nsocialMap.set('linkedin', 'https://linkedin.com/in/adriancleung');\nsocialMap.set('email', 'mailto:contact@adrianleung.dev');\n\nexport {socialMap};","import React from 'react';\nimport styles from '../styles/ModalContent.module.css';\n\nfunction ModalContent(props) {\n    return (\n      <div className={styles.ModalContentWrapper}>\n        <h1 className={styles.ModalHeader}>{props.content}</h1>\n      </div>\n    );\n}\n\nexport default ModalContent;","import React from \"react\";\nimport styles from \"../styles/Modal.module.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport ModalContent from \"./ModalContent\";\n\nfunction Modal(props) {\n  return (\n    <div\n      className={`${styles.Modal} ${\n        props.modalVisible ? styles.ModalShown : styles.ModalHidden\n      }`}\n    >\n      <div className={styles.ModalClose}>\n        <CloseIcon\n          style={{ color: \"white\", fontSize: 40 }}\n          onClick={() => props.handleModal('')}\n        />\n      </div>\n      <ModalContent content={props.content} />\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport styles from \"../styles/Title.module.css\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport { socialMap } from \"../constants\";\nimport Modal from \"./Modal\";\n\nfunction Title() {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [modalContent, setModalContent] = useState(\"\");\n\n  const handleClick = (e, type) => {\n    e.preventDefault();\n    window.open(socialMap.get(type), \"_self\");\n  };\n\n  const handleModal = (content) => {\n    setModalContent(content);\n    setModalVisible(!modalVisible);\n  };\n\n  return (\n    <>\n      <div className={styles.App}>\n        <Modal\n          modalVisible={modalVisible}\n          handleModal={handleModal}\n          content={modalContent}\n        />\n        <div>\n          <h1 className={styles.TitleText}>Adrian Leung</h1>\n          <div>\n            <GitHubIcon\n              className={styles.SocialIcons}\n              style={{ color: \"white\", fontSize: '4vw' }}\n              onClick={(e) => handleClick(e, \"github\")}\n            />\n            <LinkedInIcon\n              className={styles.SocialIcons}\n              style={{ color: \"white\", fontSize: '4vw' }}\n              onClick={(e) => handleClick(e, \"linkedin\")}\n            />\n            <MailOutlineIcon\n              className={styles.SocialIcons}\n              style={{ color: \"white\", fontSize: '4vw' }}\n              onClick={(e) => handleClick(e, \"email\")}\n            />\n          </div>\n        </div>\n        <div className={styles.ModalLinksWrapper}>\n          <p className={styles.ModalLinks} onClick={() => handleModal('Contact')}>Contact</p>\n          <p className={styles.ModalLinks} onClick={() => handleModal('About me')}>About me</p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Title;\n","import React from 'react';\nimport Title from './components/Title';\n// eslint-disable-next-line no-unused-vars\nimport {App as DefaultStyle} from './styles/App.module.css';\n\nfunction App() {\n  return (\n    <>\n      <Title />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2n1j9\",\"ModalClose\":\"Modal_ModalClose___T4mG\",\"ModalShown\":\"Modal_ModalShown__5kthc App_Shown__2YHaF\",\"ModalHidden\":\"Modal_ModalHidden__1ZETD App_Hidden__ZPxLl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalContentWrapper\":\"ModalContent_ModalContentWrapper__28KgE\",\"ModalHeader\":\"ModalContent_ModalHeader__Am_0W\"};"],"sourceRoot":""}